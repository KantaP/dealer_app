import 'package:aconnec_1109_x/src/config/pentest_firebase_options.dart';
import 'package:aconnec_1109_x/src/utilities/secure.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_flavor/flutter_flavor.dart';
import 'package:logging/logging.dart';
import 'package:aconnec_1109_x/src/di/components/injection.dart';

import 'src/app.dart';
// ignore: unused_import
import 'src/utilities/extension.dart';

import 'src/utilities/file.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);
  Logger.root.level = Level.ALL; // defaults to Level.INFO
  Logger.root.onRecord.listen((record) {
    if (kDebugMode) {
      print('${record.level.name}: ${record.time}: ${record.message}');
    }
  });

  // SystemChrome.setSystemUIOverlayStyle(
  //   SystemUiOverlayStyle(statusBarColor: blueColor),
  // );

  FlavorConfig(
    name: 'pentest',
    color: Colors.red,
    location: BannerLocation.bottomStart,
    variables: {
      'enable_root_detect': true,
    },
  );

  await Firebase.initializeApp(
    name: '1109x-pentest',
    options: PentestFirebaseOptions.currentPlatform,
  );
  // await FirebaseAppCheck.instance.activate(
  //   webRecaptchaSiteKey: '6Lf_vrEnAAAAAE29lhVP_VBfnooj23QiNIq4Z5Hq',
  //   // Default provider for Android is the Play Integrity provider. You can use the "AndroidProvider" enum to choose
  //   // your preferred provider. Choose from:
  //   // 1. debug provider
  //   // 2. safety net provider
  //   // 3. play integrity provider
  //   androidProvider: AndroidProvider.playIntegrity,
  //   // Default provider for iOS/macOS is the Device Check provider. You can use the "AppleProvider" enum to choose
  //   // your preferred provider. Choose from:
  //   // 1. Debug provider
  //   // 2. Device Check provider
  //   // 3. App Attest provider
  //   // 4. App Attest provider with fallback to Device Check provider (App Attest provider is only available on iOS 14.0+, macOS 14.0+)
  //   appleProvider: AppleProvider.debug,
  // );
  configureInjection(Env.production);
  await FileUtils.deleteCacheDir();
  SecureUtils.disableScreenshot();
  runApp(MyApp());
}
